@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject ChatService chatService



@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Chat</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
        <AuthorizeView Roles="Guide">
                <Authorized Context="ActiveChats">
                    <p>Active Chats:</p>
                    <ul>
                        @foreach (var user in activeChats)
                        {
                            <li @onclick="() => SelectChat(user)" style="cursor:pointer;@(selectedChatUser == user ? "font-weight:bold;" : "")">
                                @user
                            </li>
                        }
                    </ul>
			    </Authorized>
            </AuthorizeView>

        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

        <hr>

        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message.SentAt @message.SenderUserName: @message.Message</li>
            }
        </ul>
    </Authorized>
    <Authorizing>
        <p>You can only see this content while authentication is in progress.</p>
    </Authorizing>
    <NotAuthorized>
        <p>You are not authorized to view this content.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private HubConnection? hubConnection;
    private List<Chat> messages = new List<Chat>();
	private string? userName => context != null ? context.User.Identity?.Name : "No user found";
    private string? userReceiver => userName != "ren3ersej@gmail.com" ? "ren3ersej@gmail.com" : selectedChatUser;
    private string? messageInput;
	
    private string? selectedChatUser;
	private string? selectedChatUserId;
    private List<string> activeChats = new List<string>();
    private AuthenticationState context;


    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (senderUserName, receiverUserName, message) =>
        {
            var encodedMsg = new Chat(senderUserName, receiverUserName, message);
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });


        await hubConnection.StartAsync();

        context = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        messages = await chatService.GetUserChatsAsync(userName);
        activeChats = await chatService.GetChatUsernamesAsync(userName);
    }

    // [Authorize]
    private async Task Send()
    {
        if (IsConnected && !string.IsNullOrWhiteSpace(userName) && !string.IsNullOrWhiteSpace(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", userName, userReceiver, messageInput);
            
            ClaimsPrincipal claim = context.User;
            var newChat = new Chat
                {
                    SenderUserName = userName,
                    ReceiverUserName = userReceiver,
                    Message = messageInput,
                    SentAt = DateTime.Now,
                };
            await chatService.SaveMessageAsync(newChat, claim);

            messageInput = ""; // Clear the input after sending
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task SelectChat(string user)
    {
        selectedChatUser = user;
		selectedChatUserId = await chatService.GetUserId(selectedChatUser);
        // Load chat history with the selected user
        messages = await chatService.GetChatHistoryAsync(userName, selectedChatUser);
        StateHasChanged();
    }
}
@* <h3>CustomerTPView</h3>

    <div class="card-group">
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <!-- Repeat more cards here -->
    </div>
    <div class="card-group">
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <!-- Repeat more cards here -->
    </div>

@code {

    private async Task SelectPackage(int packageId)
    {
        SelectedPackage = unsortedTravelPackages.Find(tp => tp.Id == packageId);
        currentWeather = await CurrentWeatherService.GetCurrentWeather(SelectedPackage.Flightpaths.First().OutboundFlight.Iatadestination.City, "fr");
    }
    public TravelPackage? SelectedPackage { get; set; }

    public DateTime EarliestDeparture;

    public CurrentWeather currentWeather;

    private List<TravelPackage> filteredTravelPackages = new List<TravelPackage>();

    private List<TravelPackage> unsortedTravelPackages;

    public string Header = "Fly pakker";

    public IataLocation LeavingFrom = new IataLocation();

    public List<IataLocation> iataLocations = new List<IataLocation>();
    public int selectedIataCode;

    public void SortByPrice()
    {
        if (!SortLowestPrice)
            filteredTravelPackages = filteredTravelPackages.OrderByDescending(tp => tp.Hotel.Rate + tp.Flightpaths.FirstOrDefault().Fare).ToList();
        else
            filteredTravelPackages = filteredTravelPackages.OrderBy(tp => tp.Hotel.Rate + tp.Flightpaths.FirstOrDefault().Fare).ToList();
    }

    public void SwapSorting()
    {
        SortLowestPrice = !SortLowestPrice;
        SortByPrice();
    }
    public bool SortLowestPrice { get; private set; }

    public void FilterPackages()
    {
        var travelPackages = unsortedTravelPackages;

        travelPackages = FilterByDate(travelPackages);
        travelPackages = FilterByOrigin(travelPackages);

        filteredTravelPackages = travelPackages;

        SortByPrice();
    }

    private List<TravelPackage> FilterByDate(List<TravelPackage> travelPackages)
    {
        return travelPackages
            .Where(tp => tp.Flightpaths.Any(f => f.OutboundFlight.DepartureTime >= EarliestDeparture))
            .ToList();
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {

            unsortedTravelPackages = await TravelPackageService.GetAll() ?? new List<TravelPackage>();
            filteredTravelPackages = new List<TravelPackage>(unsortedTravelPackages);
            foreach (TravelPackage tp in unsortedTravelPackages)
            {
                foreach (Flightpath fp in tp.Flightpaths)
                {
                    if (!iataLocations.Exists(iata => iata.Id == fp.OutboundFlight.Iataorigin.Id))
                        iataLocations.Add(fp.OutboundFlight.Iataorigin);
                }
            }
            SelectedPackage = unsortedTravelPackages.First();
            currentWeather = await CurrentWeatherService.GetCurrentWeather(SelectedPackage.Flightpaths.First().OutboundFlight.Iatadestination.City, "fr");

            EarliestDeparture = DateTime.Today;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            // Handle the error appropriately, e.g., show a user-friendly message
        }

        SortLowestPrice = false;
    }

    private List<TravelPackage> FilterByOrigin(List<TravelPackage> travelPackages)
    {

        if (selectedIataCode != null)
        {
            travelPackages = travelPackages
                .Where(tp => tp.Flightpaths.Any(f => f.OutboundFlight.Iataorigin.Id == selectedIataCode))
                .ToList();
        }

        return travelPackages;
    }
}
 *@
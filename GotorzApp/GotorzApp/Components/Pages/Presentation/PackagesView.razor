@page "/packages"
@inject IService<TravelPackage> TravelPackageService
@inject IService<IataLocation> IataLocationService
@rendermode InteractiveServer

@if (travelPackages == null)
{
    <span>Loading...</span>
}
else if (travelPackages.Count == 0)
{
    <span>No packages found.</span>
}
else 
{
    <h2>Rejsepakker</h2>
    <label for="leavingFrom" class="form-label">Rejser fra:</label>
    <input type="datetime" @bind-value="EarliestDeparture"/>
    <button @onclick="FilterByDate">OPDATER for dato</button>
    <div class="col">
        <label for="leavingFrom" class="form-label">Rejser fra:</label>
        <InputSelect id="leavingFrom" @bind-Value="selectedIataCode">
            @if (iataLocations.Count() == 0)
            {
                <span>Loading...</span>
            }
            else
            {@foreach (var iata in iataLocations)
                {
                    <option value="@iata.Iata">@iata.Iata (@iata.City)</option>
                }
            }
        </InputSelect>
        <button @onclick="FilterByOrigin">OPDATER for origin</button>
    </div>
    <div class="container">
        <div class="row">
            <div class="col">
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var travelPackage in filteredTravelPackages)
                        {
                            <tr>
                                <td>@travelPackage.Title</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col">
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var travelPackage in travelPackages)
                        {
                            <tr>
                                <td>@travelPackage.Title</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-1">
            </div>
            <div class="col">
                <h2>@SelectedPackage.Title</h2>
                <div class="col">
                    <h3>Hotel</h3>
                    <div class="container">
                        <div class="row">
                            <div class="col">
                                <h5>Name</h5>
                                <p>@SelectedPackage.Hotel.Name</p>
                            </div>
                            <div class="col">
                                <h5>Check In</h5>
                                <p>@SelectedPackage.Hotel.CheckIn</p>
                            </div>
                            <div class="col">
                                <h5>Check Out</h5>
                                <p>@SelectedPackage.Hotel.CheckOut</p>
                            </div>
                            <div class="col">
                                <h5>Address</h5>
                                <p>@SelectedPackage.Hotel.Address</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <h3>Flightpaths</h3>
                    <div class="container">
                        <div class="row">
                            <div class="col">
                                <h5>From</h5>
                                @foreach (var flightpath in SelectedPackage.Flightpaths)
                                {
                                    <p>@flightpath.OutboundFlight.Iataorigin.City - @flightpath.OutboundFlight.Iataorigin.Iata</p>
                                }
                            </div>
                            <div class="col">
                                <h5>To</h5>
                                @foreach (var flightpath in SelectedPackage.Flightpaths)
                                {
                                    <p>@flightpath.OutboundFlight.Iatadestination.City - @flightpath.OutboundFlight.Iatadestination.Iata</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-group">
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <!-- Repeat more cards here -->
    </div>
    <div class="card-group">
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <div class="card mb-4" style="width: 18rem;">
            <img src="/images/hotel.jpg" class="card-img-top" alt="placeholder">
            <div class="card-body">
                <h5 class="card-title">@SelectedPackage.Title</h5>
                <p class="CardSubTitle mb-2 text-muted">@SelectedPackage.Hotel.Name</p>
                <p class="card-text">@SelectedPackage.Description</p>
                <Button Color="ButtonColor.Primary" To="#" type="buttontype.link">Rejs!</Button> 
            </div>
        </div>
        <!-- Repeat more cards here -->
    </div>
    
}

@code {
    public TravelPackage? SelectedPackage => filteredTravelPackages.FirstOrDefault();

    public DateTime EarliestDeparture;

    private List<TravelPackage> filteredTravelPackages = new List<TravelPackage>();

    private List<TravelPackage> travelPackages;

    public string Header = "Fly pakker";

    public IataLocation LeavingFrom  = new IataLocation();

    public List<IataLocation> iataLocations = new List<IataLocation>();
    public string selectedIataCode;


    private async Task FilterByDate()
    {
        filteredTravelPackages = travelPackages
            .Where(tp => tp.Flightpaths.Any(f => f.OutboundFlight.DepartureTime >= EarliestDeparture))
            .ToList();

    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            travelPackages = await TravelPackageService.GetAll() ?? new List<TravelPackage>();
            filteredTravelPackages = new List<TravelPackage>(travelPackages);
            foreach (TravelPackage tp in travelPackages)
            {
                foreach (Flightpath fp in tp.Flightpaths)
                {
                    iataLocations.Add(fp.OutboundFlight.Iataorigin);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            // Handle the error appropriately, e.g., show a user-friendly message
        }
    }
    private void FilterByOrigin()
    {
        if (LeavingFrom != null)
        {
            LeavingFrom = iataLocations.FirstOrDefault(iata => iata.Iata == selectedIataCode);
            // filteredTravelPackages = travelPackages
            //     .Where(tp => tp.Flightpaths.Any(fp => fp.OutboundFlight.IataoriginId == LeavingFrom.Id))
            //     .ToList();
                filteredTravelPackages = travelPackages
                    .Where(tp => tp.Flightpaths.Any(f => f.OutboundFlight.Iataorigin == LeavingFrom))
                    .ToList();
        }
    }

    
}


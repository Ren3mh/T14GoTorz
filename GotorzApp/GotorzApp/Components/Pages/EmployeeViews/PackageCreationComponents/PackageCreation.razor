@page "/pc"
@using System.ComponentModel.DataAnnotations;
@inject ITravelPackageService TravelPackageService
@rendermode InteractiveServer
@attribute [StreamRendering]

@attribute [Authorize(Policy = "Employee")]

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3>DU er ADMIN</h3>
    </Authorized>
    <NotAuthorized>
        <h3>DU er ikke ADMIN</h3>
    </NotAuthorized>
</AuthorizeView>

<PageTitle>Put together a package!</PageTitle>

<h1>Package Createion</h1>

<Accordion @ref="accordion">
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.AirplaneFill" Class="me-1" /> Create Flights
        </TitleTemplate>
        <Content> 
            <FPCreation @ref="flightpathForm" OnValidSubmit="HandleValidFlightpathSubmit" />
        </Content>
    </AccordionItem>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.BuildingFillAdd" Class="me-1" /> Add Hotel
        </TitleTemplate>
        <Content>
            <HotelCreation @ref="hotelForm" OnValidSubmit="HandleValidHotelSubmit" />
        </Content>
    </AccordionItem>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.FileEarmarkImageFill" Class="me-1" /> Add Photo
        </TitleTemplate>
        <Content>
            <AddPhoto @ref="photoForm" OnValidSubmit="HandleValidPhotoSubmit" />
        </Content>
    </AccordionItem>
</Accordion>

<EditForm method="post" Model="newTravelPackage" OnValidSubmit="SubmitTravelPackage" FormName="CreateTravelPackage" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />
    <div class="mb-3">
        <label for="Title" class="form-label">Title:</label>
        <InputText id="Title" @bind-Value="newTravelPackage.Title" class="form-control" />
        <ValidationMessage For="() => newTravelPackage.Title" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="Description" class="form-label">Description:</label>
        <InputTextArea id="Description" @bind-Value="newTravelPackage.Description" class="form-control" />
        <ValidationMessage For="() => newTravelPackage.Description" class="text-danger" />
    </div>
    <button id="submitBtn" type="submit" disabled="@(!IsValid())" class="btn btn-primary">Create Travel Package</button>
</EditForm>

@if (added)
{
    <h3 id="created">Travel Package Created</h3>
    <p>@newTravelPackage.Title</p>
    <p>@newTravelPackage.Description</p>

    <h4>Flightpath</h4>
    <p>@newTravelPackage.Flightpaths.First().Fare</p>
    <p>@newTravelPackage.Flightpaths.First().Luggage</p>

    <h4>Hotel</h4>
    <p>@newTravelPackage.Hotel.Name </p>
    <p>@newTravelPackage.Hotel.Rate </p>
    <p>@newTravelPackage.Hotel.CheckIn </p>
    <p>@newTravelPackage.Hotel.CheckOut </p>
    <p>@newTravelPackage.Hotel.Address</p>
    <p>@newTravelPackage.Hotel.Email </p>
    <p>@newTravelPackage.Hotel.Telephonenumber </p>
    @if (!string.IsNullOrEmpty(newTravelPackage.Hotel.Description))
    {
        <p>@newTravelPackage.Hotel.Description </p>
    }
}

@code {
    private Accordion accordion = default!;
    private async Task ShowHotelCreationAsync() => await accordion.ShowAccordionItemByIndexAsync(1);
    private async Task ShowPhotoCreationAsync() => await accordion.ShowAccordionItemByIndexAsync(2);

    private async Task HideFlightpathCreationAsync() => await accordion.HideAccordionItemByIndexAsync(0);
    private async Task HideHotelCreationAsync() => await accordion.HideAccordionItemByIndexAsync(1);
    private Task HideAllAccordionItemsAsync() => accordion.HideAllAccordionItemsAsync();

    FPCreation flightpathForm = new FPCreation();
    private void HandleValidFlightpathSubmit(Flightpath flightpath)
    {
        newTravelPackage.Flightpaths.Clear();
        newTravelPackage.Flightpaths.Add(flightpath);

        HideFlightpathCreationAsync();
        ShowHotelCreationAsync();
    }

    HotelCreation hotelForm = new HotelCreation();
    private void HandleValidHotelSubmit(Hotel hotel)
    {
        newTravelPackage.Hotel = hotel;
        HideHotelCreationAsync();
        ShowPhotoCreationAsync();
    }

    AddPhoto photoForm = new AddPhoto();
    private void HandleValidPhotoSubmit(Photo photo)
    {
        newTravelPackage.Photo = photo;
        HideAllAccordionItemsAsync();
    }

    private IList<ValidationResult> ValidateModel(object model)
    {
        var results = new List<ValidationResult>();
        var context = new ValidationContext(model, serviceProvider: null, items: null);
        Validator.TryValidateObject(model, context, results, validateAllProperties: true);
        return results;
    }

    bool IsValid()
    {
        var isValid = false;

        if (newTravelPackage == null)
            return isValid;

        var travelPackageResults = ValidateModel(newTravelPackage);

        if (!travelPackageResults.Any())
            isValid = true;

        return isValid;
    }

    [SupplyParameterFromForm(FormName = "CreateTravelPackage")]
    public TravelPackage newTravelPackage { get; set; } = new TravelPackage();

    protected override async Task OnInitializedAsync()
    {
    }

    public bool added = false;
    public async Task SubmitTravelPackage()
    {
        var travelPackageToInsert = new TravelPackage
            {
                Title = newTravelPackage.Title,
                Description = newTravelPackage.Description,
                Flightpaths = new List<Flightpath> { newTravelPackage.Flightpaths.First() },
                Hotel = newTravelPackage.Hotel,
                Photo = newTravelPackage.Photo
            };
        travelPackageToInsert.Flightpaths.First().OutboundFlight.IataOrigin = null;
        travelPackageToInsert.Flightpaths.First().OutboundFlight.IataDestination = null;
        travelPackageToInsert.Flightpaths.First().HomeboundFlight.IataOrigin = null;
        travelPackageToInsert.Flightpaths.First().HomeboundFlight.IataDestination = null;

        added = await TravelPackageService.Add(travelPackageToInsert);
    }
}
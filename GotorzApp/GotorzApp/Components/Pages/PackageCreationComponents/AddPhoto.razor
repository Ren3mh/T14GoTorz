@rendermode InteractiveServer

<h1>Add Photo</h1>

<div class="row">
    <div class="col-md-8">
        <EditForm method="post" Model="newPhoto" OnValidSubmit="SubmitPhoto" FormName="UploadPhoto" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="fileInput" class="form-label">Select Photo</label>
                <InputFile id="fileInput" accept=".jpg,.jpeg,.png" OnChange="HandleImageChange" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText id="description" class="form-control" @bind-Value="newPhoto.PhotoName" />
            </div>
            <button type="submit" class="btn btn-primary">Add Photo</button>
        </EditForm>
    </div>
</div>

<div class="row">
    <div class="col">
        @if (message != null)
        {
            <p>@message</p>
        }
    </div>
    <div class="col">
        @if (newPhoto.PhotoName != null)
        {
            <p>@newPhoto.PhotoName</p>
        }
        else
        {
            <p>No photo selected.</p>
        }
    </div>
</div>
<div class="row">
    @if (!string.IsNullOrEmpty(imagePreview))
    {
        <img src="@imagePreview" alt="Image Preview" style="max-width: 100%; max-height: 400px;"/>
    }
</div>


@code {
    [SupplyParameterFromForm(FormName = "UploadPhoto")]
    Photo newPhoto { get; set; } = new Photo();
    private string message;
    private string imagePreview;

    [Parameter]
    public EventCallback<Photo> OnValidSubmit { get; set; }

    private async Task SubmitPhoto()
    {
        await OnValidSubmit.InvokeAsync(newPhoto);
        message = "Photo added successfully!";
    }

    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        byte[] byteArray;

        try
        {
            byteArray = await Photo.CreateByteArrayFromFile(e.File);
            imagePreview = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(byteArray)}";
            newPhoto.PhotoData = byteArray;
            newPhoto.PhotoName = e.File.Name;
        }
        catch (InvalidOperationException ex)
        {
            message = $"Error processing image: {ex.Message}";
            imagePreview = null;
        }
        catch (ArgumentNullException ex)
        {
            message = $"An unexpected error occurred";
            imagePreview = null;
        }
    }
}
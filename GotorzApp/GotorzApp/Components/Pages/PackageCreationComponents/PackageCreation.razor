@page "/pc"
@using System.ComponentModel.DataAnnotations;
@inject IService<Hotel> HotelService
@inject IService<TravelPackage> TravelPackageService
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Put together a package!</PageTitle>

<h1>Package Createion</h1>

<Accordion>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.AirplaneFill" Class="me-1" /> Create Flights
        </TitleTemplate>
        <Content> 
            <FPCreation @ref="flightpathForm" OnValidSubmit="HandleValidFlightpathSubmit" />
        </Content>
    </AccordionItem>
    <AccordionItem>
        <TitleTemplate>
            <Icon Name="IconName.BuildingFillAdd" Class="me-1" /> Add Hotel
        </TitleTemplate>
        <Content>
            <HotelCreation @ref="hotelForm" OnValidSubmit="HandleValidHotelSubmit" />
        </Content>
    </AccordionItem>
</Accordion>

<EditForm method="post" Model="newTravelPackage" OnValidSubmit="SubmitTravelPackage" FormName="CreateTravelPackage" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />
    <div class="mb-3">
        <label for="Title" class="form-label">Title:</label>
        <InputText id="Title" @bind-Value="newTravelPackage.Title" class="form-control" />
        <ValidationMessage For="() => newTravelPackage.Title" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="Description" class="form-label">Description:</label>
        <InputTextArea id="Description" @bind-Value="newTravelPackage.Description" class="form-control" />
        <ValidationMessage For="() => newTravelPackage.Description" class="text-danger" />
    </div>
    <button type="submit" disabled="@(!IsValid())" class="btn btn-primary">Create Travel Package</button>
</EditForm>

@if (added)
{
    <h3>Travel Package Created</h3>
    <p>@newTravelPackage.Title</p>
    <p>@newTravelPackage.Description</p>

    <h4>Flightpath</h4>
    <p>@newTravelPackage.Flightpaths.First().Fare</p>
    <p>@newTravelPackage.Flightpaths.First().Luggage</p>

    <p>Outbound</p>
    <p>@newTravelPackage.Flightpaths.First().OutboundFlight.IataOrigin.City</p>
    <p>@newTravelPackage.Flightpaths.First().OutboundFlight.IataDestination.City</p>
    <p>@newTravelPackage.Flightpaths.First().OutboundFlight.DepartureTime</p>
    <p>@newTravelPackage.Flightpaths.First().OutboundFlight.ArrivalTime</p>

    <p>Outbound</p>
    <p>@newTravelPackage.Flightpaths.First().HomeboundFlight.IataOrigin.Iata</p>
    <p>@newTravelPackage.Flightpaths.First().HomeboundFlight.IataDestination.Iata</p>
    <p>@newTravelPackage.Flightpaths.First().HomeboundFlight.DepartureTime</p>
    <p>@newTravelPackage.Flightpaths.First().HomeboundFlight.ArrivalTime</p>

    <h4>Hotel</h4>
    <p>@newTravelPackage.Hotel.Name </p>
    <p>@newTravelPackage.Hotel.Rate </p>
    <p>@newTravelPackage.Hotel.CheckIn </p>
    <p>@newTravelPackage.Hotel.CheckOut </p>
    <p>@newTravelPackage.Hotel.Address</p>
    <p>@newTravelPackage.Hotel.Email </p>
    <p>@newTravelPackage.Hotel.Telephonenumber </p>
    @if (!string.IsNullOrEmpty(newTravelPackage.Hotel.Description))
    {
        <p>@newTravelPackage.Hotel.Description </p>
    }
}

@code {
    FPCreation flightpathForm = new FPCreation();
    private void HandleValidFlightpathSubmit(Flightpath flightpath)
    {
        newTravelPackage.Flightpaths.Clear();
        newTravelPackage.Flightpaths.Add(flightpath);
    }

    HotelCreation hotelForm = new HotelCreation();
    private void HandleValidHotelSubmit(Hotel hotel)
    {
        newTravelPackage.Hotel = hotel;
    }

    private IList<ValidationResult> ValidateModel(object model)
    {
        var results = new List<ValidationResult>();
        var context = new ValidationContext(model, serviceProvider: null, items: null);
        Validator.TryValidateObject(model, context, results, validateAllProperties: true);
        return results;
    }

    bool IsValid()
    {
        var isValid = false;

        if (newTravelPackage == null)
            return isValid;

        var travelPackageResults = ValidateModel(newTravelPackage);

        if (!travelPackageResults.Any())
            isValid = true;

        return isValid;
    }

    [SupplyParameterFromForm(FormName = "CreateTravelPackage")]
    TravelPackage newTravelPackage { get; set; } = new TravelPackage();

    protected override async Task OnInitializedAsync()
    {
    }

    bool added = false;
    public async Task SubmitTravelPackage()
    {
        added = true;
        //await TravelPackageService.Add(TravelPackage);
    }
}
@page "/chat"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@
@attribute [Authorize]

<PageTitle>Chat</PageTitle>

  User: @userName


<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
	private string? userName => context != null ? context.User.Identity?.Name : "No user found";
    private string? messageInput;
    private AuthenticationState context;


    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = ;
        @context.User.Identity?.Name

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }

        await hubConnection.StartAsync();
    }

    // [Authorize]
    private async Task Send()
    {
        if (hubConnection is not null && !string.IsNullOrWhiteSpace(userName) && !string.IsNullOrWhiteSpace(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", userName, messageInput);
            messageInput = ""; // Clear the input after sending
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}